#include "NetProt_Module.h"
#include "NumberBaseLib.h"
#include "Gpio.h"
#include "StrLib.h"
#include "AT24CXXDataLoader.h"
#include "SetTime.h"
#include "RX8025T.h"
#include "MQTT_JSON.h"
#include "../C_MyLib/4G_ATCmd_FunctionSum.h"
#include "../C_MyLib/NET_ATCmd_FunctionSum.h"
/******************************/
strnew UartBuff = {0};    // Uart接收缓冲区
NetDevParameter Now_NetDevParameter;    // 网络状态标记与下行指令表
NetDevATCmd * NetDevice_ATData;

bool checkUart(int MaxTimeMs) {
    int MaxTime = (MaxTimeMs == 0 ? 1000 : MaxTimeMs);
    bool Flag = false;
    for (int i = 0; i < MaxTime; i++) {
        Flag = (Now_NetDevParameter.NetDataBuff_NowLen > 0 ? true : false);
        if (Flag) {
            break;
        }
        IncludeDelayMs(1);
    }
    return Flag;
}
bool _FindStr_WaitTime(strnew FindStr, int MaxTimeMs, char ** OutNote) {
    char * TempP = NULL;
    if (checkUart(MaxTimeMs)) {
        if ((TempP = strstr(Now_NetDevParameter.NetDataBuff, FindStr.Name._char)) == NULL) {
            return false;
        }
        (*OutNote) = ((OutNote != NULL) ? TempP : NULL);
        return true;
    }
    return false;
}

void ClearNetDataBuff(void) {
    memset(Now_NetDevParameter.NetDataBuff, 0, ARR_SIZE(Now_NetDevParameter.NetDataBuff)); // 释放 HTTPBuff_p
    Now_NetDevParameter.NetDataBuff_NowLen = 0;
}
void sendDataByTTLProt(void * dataStr, int SendCmdLen) {
    char * SendCmd = (char *)dataStr;
    if (UP_Mode_EC20_ON) {
#ifdef _4G_ATCMD_FUNCTIONSUM_H
        sendDataBy4GProt(SendCmd, SendCmdLen);
#endif
    } else {
#ifdef _NET_ATCMD_FUNCTIONSUM_H
        sendDataByNetProt(SendCmd, SendCmdLen);
#endif
    }
}
// 设置模组处于AT模式
bool SetDevATCMDModel_ThroughSendData(void) {
    checkUart(0);
    bool ATConfig_Flag;
    // 清除 Now_NetDevParameter 状态标记
    Now_NetDevParameter.isCmdResFlag = false;
    Now_NetDevParameter.isWriteEEprom = false;
#ifdef IsShortLinkModeFlag
    ATConfig_Flag = EnterATMode_NB();
#else
//NET 进入 AT 模式
    if (UP_Mode_EC20_ON) {
#ifdef _4G_ATCMD_FUNCTIONSUM_H
        ATConfig_Flag = EnterATMode_4G();
#endif
    } else {
#ifdef _NET_ATCMD_FUNCTIONSUM_H
        ATConfig_Flag = EnterATMode_NET();
#endif
    }
#endif

#ifdef OPEN_AT_CMD_DEBUG
    ATCmdDebugTask();
#ifdef IsShortLinkModeFlag
    RTC_TASK.InitSetTimeTask(SendTimeOverTask, 1, NULL); // 超过 1 s，需要关闭 NB
#endif
#endif
    return ATConfig_Flag;
}
void clearUartBuff(void) {
    memset(UartBuff.Name._char, 0, UartBuff.MaxLen);
    NowLenOfUartBuff = 0;   // 需要把外部传入的buff标记或长度复位才算清空
}
int IsOverTimeOfUart(int TempNowRxLen) {
    while (1) {
        IncludeDelayMs(30);    // 等待 30ms 接收数据，避免短数据占用太多时间
        if (TempNowRxLen == NowLenOfUartBuff) {
            return NowLenOfUartBuff;
        }
        TempNowRxLen = NowLenOfUartBuff;
    }
}
// 判断是否连接上MQTT （参数 ：false 不重启模组，true 设备不在线则重启模组）
bool isMQTTLinkOnleng(bool isResAtDev) {
    bool ATConfig_Flag = false;
    if (AT24CXX_Manager_NET.NetCheckENableFlag == false) {
        return true;
    }

    if ((isResAtDev) && (Now_NetDevParameter.NowNetOnlineFlag == false)) {
        for (int i = 0; i < 10; i++) {
            if (SetDevATCMDModel_ThroughSendData()) {
                break;
            }
        }
    }
#ifdef IsShortLinkModeFlag
    ATConfig_Flag = isMQTTLinkOnleng_NB();
#else
    if (UP_Mode_EC20_ON) {
#ifdef _4G_ATCMD_FUNCTIONSUM_H
        ATConfig_Flag = isMQTTLinkOnleng_4G();
#endif
    } else {
#ifdef _NET_ATCMD_FUNCTIONSUM_H
        ATConfig_Flag = isMQTTLinkOnleng_NET();
#endif
    }
#endif
    if (ATConfig_Flag) {
        return true;
    }
    return false;
}
// 处理用户请求/命令
bool doingUserRequest(void) {
    return true;
}
// 发送ATCmd
bool sendATCmdData(NetDevATCmd NowATCmd) {
    newString(ATCmd_SendBUFF, 500);
    // 装载指令
    NowATCmd.DataInstallation(ATCmd_SendBUFF, &NowATCmd);
    clearUartBuff();
    // 发送指令
    sendDataByTTLProt(ATCmd_SendBUFF.Name._char, ATCmd_SendBUFF.getStrlen(&ATCmd_SendBUFF));
    for (int ResCount_i = 0; ResCount_i <= NowATCmd.CmsResCount; ResCount_i++) {
        newstrobj(TempSucessStr, 1);
        TempSucessStr.Name._char = NowATCmd.SucessStr;
        TempSucessStr.MaxLen = TempSucessStr.getStrlen(&TempSucessStr);
        if (FindStr_WaitTime(TempSucessStr, NowATCmd.DelayTime) == false) {   // 模组是否回复
            ClearNetDataBuff();
            // 判断是否可以跳过
            if ((NowATCmd.DoingATReceiveFunName == ResetTrueDoingFun) && ((ResCount_i + 1) == NowATCmd.CmsResCount)) {
                return true; // 发送结束也没收到回复，直接跳过
            }
            continue;
        }
        // 处理模组的回复
        if (NowATCmd.DoingATCmdResData(&NowATCmd) == false) {
            return false; // AT 指令发送失败
        }
        // 该指令是否需要上位机回复，如果不需要直接回复 true
        if (NowATCmd.IsGetComputerResFlag == false) {
            return true; // 上位机回复成功
        }
        return doingUserRequest(); // 上位机回复成功
    }
    return (NowATCmd.CmsResCount == 0 ? true : false); // AT 指令发送失败限制为0,直接跳过该指令
}
// 获取指令
char copyComputerDownData(void) {
    if (checkUart(0)) { // 从 UART0Ddata 获取数据
        char * AddrStart = NULL;
        if (myStrstr(Now_NetDevParameter.NetDataBuff, "{\"gw\":", ARR_SIZE(Now_NetDevParameter.NetDataBuff)) != NULL) {
            if (NULL == (AddrStart = myStrstr(Now_NetDevParameter.NetDataBuff, "{\"gw\":", ARR_SIZE(Now_NetDevParameter.NetDataBuff)))) {
                ClearNetDataBuff();
                return false;
            }
            if (NULL == strstr(AddrStart, "}}")) {
                return false;
            }
            if (Now_NetDevParameter.CmdTable.NowListNum >= CmdListMax) {
                Now_NetDevParameter.CmdTable.popUpListStr(&Now_NetDevParameter.CmdTable);  // 弹出队列 List
            }
            // 将下行指令推入队列 List
            Now_NetDevParameter.CmdTable.pushListStr(&Now_NetDevParameter.CmdTable, NEW_NAME(Now_NetDevParameter.NetDataBuff));
            ClearNetDataBuff(); // 释放 HTTPBuff_p
            return true;
        } else {
            // 其他定制指令
        }
    }
    return false;
}
// 搬运串口数据
bool copyDataForUART(void) {
    if (NowLenOfUartBuff != 0) {
        int NowRxLen = IsOverTimeOfUart(NowLenOfUartBuff);  // 返回接收完全的数据长度
        if (NowRxLen > CmdStrLenMax) {
            clearUartBuff();
            return false;
        }
        UartDisableIRQ;
        if (Now_NetDevParameter.NetDataBuff_NowLen + NowRxLen <= ARR_SIZE(Now_NetDevParameter.NetDataBuff)) {                                                                                                                                 // 追加到 Now_NetDevParameter.NetDataBuff
            memcpy(&Now_NetDevParameter.NetDataBuff[Now_NetDevParameter.NetDataBuff_NowLen], UartBuff.Name._char, NowRxLen); // 接收数据
            Now_NetDevParameter.NetDataBuff_NowLen += NowRxLen;
        } else {
            ClearNetDataBuff();
            memcpy(Now_NetDevParameter.NetDataBuff, UartBuff.Name._char, NowRxLen);   // 接收数据
            Now_NetDevParameter.NetDataBuff_NowLen = NowRxLen;
        }
        clearUartBuff();
        UartEnableIRQ;
#ifdef IsShortLinkModeFlag
        if (!Now_NetDevParameter.isGetDownCmd) { // 短链接，非主动获取的模式下，需要监控指令
            Now_NetDevParameter.isCmdResFlag = (Now_NetDevParameter.isCmdResFlag | copyComputerDownData());  // 检查是否有收到数据
        }
#endif
        return true;
    } else {
        return false;
    }
}
bool isNBOverTime(void) {
#ifdef IsShortLinkModeFlag
    if (RTC_TASK.Task[SendTimeOverTask].TimeTask_Falge) {
        RTC_TASK.CloseTask(SendTimeOverTask); // 关闭定时任务
        RTC_TASK.Task[SendTimeOverTask].MaxSecNum = 0;
        RTC_TASK.Task[SendTimeOverTask].CountNumOnceSec = 0;
        return true;
    }
    return false;
#else
    return false;
#endif
}
void isNo_One_Connect(void) {
    if (UP_Mode_EC20_ON) {
        RTC_TASK.InitSetTimeTask(WriteTimeOfLocal, 10, Write_RX8025T_AndRTC_By_UTC8); // 10s 后写入时间 (4G)
    }
    Now_NetDevParameter.CheckOnlineFlag = setDataBit(Now_NetDevParameter.CheckOnlineFlag, 0, false);  // 关闭网络检查
    Now_NetDevParameter.NowNetOnlineFlag = true; // 设备已在线
    Now_NetDevParameter.ReBootCount = 0;         // 连接成功，重器计数清零
    JSON_Send_GW_Infor(Now_NetDevParameter.ReBootCount > 0 ? true : false);
    printf("Now the gateway is online\r\n");
}
// 检查时间任务
void check_time_task(void) {
#ifdef IsShortLinkModeFlag  
    RTC_TASK.CloseTask(CheckNet); // 关闭 CheckNet 任务
#else
    RTC_TASK.InitSetTimeTask(CheckNet, Now_NetDevParameter.LineCheckTime, check_time_task);
    Now_NetDevParameter.CheckOnlineFlag = setDataBit(Now_NetDevParameter.CheckOnlineFlag, 0, true);   // 打开网络检查s
#endif
}
bool checkLinkStat(void) {
    bool ResFlag = false;
    if (UP_Mode_EC20_ON) {
#ifdef _4G_ATCMD_FUNCTIONSUM_H
        ResFlag = checkLinkStat_4G();
#endif
    } else {
#ifdef _NET_ATCMD_FUNCTIONSUM_H
        ResFlag = Now_NetDevParameter.NowNetOnlineFlag;
        //ResFlag = checkLinkStat_NET();
#endif
    }
    return ResFlag;
}
#ifdef IsShortLinkModeFlag
#define LinkContMax 1
#else
#define LinkContMax 5
#endif
void Net_Task(void) {
    static uint8_t LinkContinueTime = LinkContMax; // 连续 5 次都连接不上，则稍后再尝试， // 注意最高位不能使用
    if (Now_NetDevParameter.NowNetOnlineFlag == false) {
        if (!RTC_TASK.Task[PauseTimeOfLinkErr].TimeTask_Falge) {
            goto NetSubOver;
        }
        LinkContinueTime = setDataBit(LinkContinueTime, 7, true); // 标记本次尝试连接
    }
    if (readDataBit(Now_NetDevParameter.CheckOnlineFlag, 0) == true) { // 检查当前设备 network 是否在线
        Now_NetDevParameter.CheckOnlineFlag = setDataBit(Now_NetDevParameter.CheckOnlineFlag, 0, false);  // 关闭网络检查
        if (isMQTTLinkOnleng(true)) {
            Now_NetDevParameter.NowNetOnlineFlag = true;  // 标记在线
        } else {
            Now_NetDevParameter.NowNetOnlineFlag = false; // 标记不在线，下次运行这个任务时重启
            Now_NetDevParameter.ReBootCount++;
        }
    }
    if (isNBOverTime()) {
        goto NetSubOver;
    }
    // 不在线或无连接，重新联网通信
    if (Now_NetDevParameter.NowNetOnlineFlag == false) {
        // 设置模组进入 AT 模式
        for (int i = 0; i < 10; i++) {
            if (SetDevATCMDModel_ThroughSendData()) {
                if (isNBOverTime()) {
                    goto NetSubOver;
                }
                break;
            }
        }
        int NowStep = 0;
        while (NowStep != -1) {
            // 一个是否执行的开关，后续可扩展为指令控制
            if (NetDevice_ATData[NowStep].RunFlag) {
                for (int SendCount_i = 0; SendCount_i < NetDevice_ATData[NowStep].CmdSendCount; SendCount_i++) {
                    if (sendATCmdData(NetDevice_ATData[NowStep])) {
                        break;
                    }
                    // 联网遇到问题，中断联网进程
                    if ((SendCount_i + 1) == NetDevice_ATData[NowStep].CmdSendCount) {
                        Now_NetDevParameter.CheckOnlineFlag = setDataBit(Now_NetDevParameter.CheckOnlineFlag, 0, false);  // 关闭网络检查
                        Now_NetDevParameter.NowNetOnlineFlag = false; // 标记不在线，下次运行这个任务时重启
                        Now_NetDevParameter.ReBootCount++;            // 重连一次
                        printf("The network connection has been interrupted : %s\r\n", NetDevice_ATData[NowStep].ATCmd);
                        goto NetSubOver;
                    }
                }
            }
            NowStep = NetDevice_ATData[NowStep].Next_CmdID;
            if (isNBOverTime()) {
                goto NetSubOver;
            }
        }
        IncludeDelayMs(3000);   // 连接流程结束后等待 3 秒
        // 判断 MQTT 是否在线
        if (isMQTTLinkOnleng(false)) {
            RTC_TASK.InitSetTimeTask(PauseTimeOfLinkErr, 5, NULL);      // 恢复限制冷却时间
            LinkContinueTime = setDataBit(LinkContinueTime, 7, false); // 恢复标记本次尝试连接
            isNo_One_Connect();
        }
        if (isNBOverTime()) {
            goto NetSubOver;
        }
        Now_NetDevParameter.ReBootCount = 0; // 复位重启计数器
        ClearNetDataBuff();
    }
#ifdef IsShortLinkModeFlag
    Now_NetDevParameter.GetDownCmd();
    if (Now_NetDevParameter.SendData != NULL) {
        Now_NetDevParameter.isSendOk = Now_NetDevParameter.SendData();  // 发送数据
        ClearNetDataBuff(); // 清空数据
    }
    Now_NetDevParameter.GetDownCmd();
NetSubOver:
#else
NetSubOver:
    if (readDataBit(Now_NetDevParameter.CheckOnlineFlag, 4) == true) {  // 是否需要被动监控某个特殊字段
        Now_NetDevParameter.NowNetOnlineFlag = checkLinkStat();         // 标记是否在线，下次运行这个任务时重启            
    }
    Now_NetDevParameter.GetDownCmd();
#endif
    Now_NetDevParameter.NowNetOnlineFlag = true;
    do {
        if (Now_NetDevParameter.DoneCmd != NULL) {
            Now_NetDevParameter.DoneCmd(); // 处理指令
        }
#ifdef IsShortLinkModeFlag
#include "updata.h"
        if (UpdataData.Sign == 0xB2) {
            for (int i = 0; i < 6; i++) {
                if (FindStr_WaitTime(NEW_NAME("+NNMI"), 1000) == true) {
                    Now_NetDevParameter.GetDownCmd();
                    break;
                }
                ClearNetDataBuff();
            }
        }
        Now_NetDevParameter.isCmdResFlag = (Now_NetDevParameter.CmdTable.NowListNum != 0 ? true : false); // 清除标志
        ClearNetDataBuff();
#endif
    } while (Now_NetDevParameter.isCmdResFlag);
#ifdef IsShortLinkModeFlag
    if (Now_NetDevParameter.ShowdownNowDev != NULL) {
        Now_NetDevParameter.ShowdownNowDev();   // 短链接，需要关闭设备
        Now_NetDevParameter.NowNetOnlineFlag = false;
    }
    RTC_TASK.InitSetTimeTask(PauseTimeOfLinkErr, 1, NULL); // 短链接，1s 后继续尝试
    LinkContinueTime = LinkContMax;  // 短链接，恢复联网次数限制
    LinkContinueTime = setDataBit(LinkContinueTime, 7, false); // 恢复标记本次尝试连接
    return;
#else
    if (Now_NetDevParameter.NowNetOnlineFlag == false) { // 如果标记，则本次连接尝试已完成
        if (!readDataBit(LinkContinueTime, 7)) {
            return;
        }
        LinkContinueTime = setDataBit(LinkContinueTime, 7, false); // 恢复标记本次尝试连接
        if (RTC_TASK.Task[PauseTimeOfLinkErr].TimeTask_Falge) {
#ifndef IsShortLinkModeFlag // 长连接状态下, 需要限制尝试联网的次数
            LinkContinueTime = (LinkContinueTime > 0 ? (LinkContinueTime - 1) : LinkContMax);
#endif
            if (LinkContinueTime != 0) {
                RTC_TASK.InitSetTimeTask(PauseTimeOfLinkErr, 1, NULL); // 1s 后继续尝试
            } else {
                RTC_TASK.InitSetTimeTask(PauseTimeOfLinkErr, MinToSec(240), NULL); // 一天连 6 次 1440/12 = 240
            }
        }
    } else {
        LinkContinueTime = LinkContMax;  // 恢复联网次数限制
    }
#endif
}

/***********************************************/
/***********************************************/
/***********************************************/

void _pushListStr(struct _TableOfCmdTask This, strnew InputStr) {     // 推入队列 DebugStr
    // 计算输入字符串长度
    int InputStrLen = InputStr.getStrlen(&InputStr);
    // 如果输入字符串长度大于队列字符串长度，则截断
    if (InputStrLen > CmdStrLenMax) {
        memcpy(This.ListStr[This.NowListAddr], InputStr.Name._char, CmdStrLenMax);    // 将输入字符串复制到队列中
        This.ListStr[This.NowListAddr][CmdStrLenMax] = '\0';                          // 队列末尾字符串结束符
    } else {
        strcpy(This.ListStr[This.NowListAddr], InputStr.Name._char);                    // 将输入字符串复制到队列中
        This.ListStr[This.NowListAddr][strlen(This.ListStr[This.NowListAddr])] = '\0';  // 队列末尾字符串结束符
    }
    // 计数队列下一个
    This.NowListAddr = (This.NowListAddr + 1) % CmdListMax;
    // 队列已保存数加一
    if (This.NowListNum < CmdListMax) {
        This.NowListNum++;
    } else {
        This.NowListStartAddr = This.NowListAddr; // 记满时，首端地址在尾端的后一位
    }
}
strnew _popUpListStr(struct _TableOfCmdTask This) {   // 弹出队列 DebugStr
    strnew Outputstr = NEW_NAME(This.OututStrOnce);
    if (This.NowListNum == 0) {
        memset(Outputstr.Name._char, 0, CmdStrLenMax);
        strcpy(Outputstr.Name._char, "null");
        return Outputstr;
    }
    // 取出队列首端的字符串
    memcpy(Outputstr.Name._char, This.ListStr[This.NowListStartAddr], strlen(This.ListStr[This.NowListStartAddr]));
    // 清空首端字符串
    memset(This.ListStr[This.NowListStartAddr], 0, CmdStrLenMax);
    // 队列已保存数减一
    This.NowListNum--;
    // 队列首端地址后移
    This.NowListStartAddr = (This.NowListStartAddr + 1) % CmdListMax;
    return Outputstr;
}
void TableOfCmdTaskInit(void) { // 下行任务表初始化
    TableOfCmdTask ZeroData = {0};
    Now_NetDevParameter.CmdTable = ZeroData;
    Now_NetDevParameter.CmdTable.pushListStr = _pushListStr;
    Now_NetDevParameter.CmdTable.popUpListStr = _popUpListStr;
}
// 根据不同的模组，写一个函数主动获取下行指令（无所谓模组是单条推出，还是一起，由解析函数区分）
void UserGetDownCmd(void) {
    bool IsGetDownCmd = false;
    do {
        IsGetDownCmd = false;
        if (!Now_NetDevParameter.isGetDownCmd) { // 非主动获取指令,直接退出
            break;
        }
        // 主动获取指令,并返回是否有指令已存入缓存区
        // if (UserGetDownCmd__XXX() == false) {
        //     return;
        // }
        IsGetDownCmd = copyComputerDownData();
        Now_NetDevParameter.isCmdResFlag = (Now_NetDevParameter.isCmdResFlag | IsGetDownCmd);  // 检查是否有收到数据
    } while (IsGetDownCmd);
}
bool UserSendData(void) {
    return true;
}
void UserDoneCmd(void) {
    while (Now_NetDevParameter.CmdTable.NowListNum > 0) {
        strnew OnceLineListStr = Now_NetDevParameter.CmdTable.popUpListStr(&Now_NetDevParameter.CmdTable);   // 弹出一行数据
        #warning(如果模组回的太快, 一行数据可能就是两三条指令, 未确定是否区分);
        if (strstr(OnceLineListStr.Name._char, "{\"gw\":") != NULL) {
            HY_FLAG = true;
            MQTT_JSON_Analysis(OnceLineListStr);
            printf("Received Command of HuiYun\r\n");
        } else {
            HY_FLAG = false;
            printf("Received Command of Other\r\n");
            HY_FLAG = true;
        }
    }
}
// AT 参数初始化
void setNetArgumentInit(void (*UserShowdownNowDev)(void)) {
    // 初始化 Now_NetDevParameter
    Now_NetDevParameter.CheckOnlineFlag = setDataBit(Now_NetDevParameter.CheckOnlineFlag, 4, true); // 是否需要被动监控某个字段
    Now_NetDevParameter.LineCheckTime = 5 * 60;  // 判断你是否处于连接状态
    Now_NetDevParameter.ShowdownNowDev = UserShowdownNowDev;
    Now_NetDevParameter.SendData = UserSendData;    // 长连接不需要发送函数
    Now_NetDevParameter.DoneCmd = UserDoneCmd;      // 处理指令
    Now_NetDevParameter.GetDownCmd = UserGetDownCmd;// 获取下行指令
    Now_NetDevParameter.isGetDownCmd = false;       // 是否需要监控下行指令
    TableOfCmdTaskInit();                           // 指令表初始化
    UartBuff = NEW_NAME(UART_DATABUFF);             // 初始化缓存 UartBuff

    // 特殊定时任务
#ifndef IsShortLinkModeFlag  
        RTC_TASK.InitSetTimeTask(CheckNet, Now_NetDevParameter.LineCheckTime, check_time_task);
#endif
    // 初始化 SetTime 任务
    // 初始化 SetLPTime 任务
    SetLPTime.LPInitSetTimeTask(RefreshLED, SecTo250Ms(0.5), Refresh_LED);
    // 初始化 RTC_TASK 任务
    RTC_TASK.InitSetTimeTask(Read_EEprom, MinToSec(80), NULL);
    RTC_TASK.InitSetTimeTask(TestVoltgeAndMA, 2, NULL);
    RTC_TASK.InitSetTimeTask(MBUSUARTReboot, MinToSec(2160), MBUS_Uart1_Init);  // 启动 Uart 重启任务
    RTC_TASK.InitSetTimeTask(DayOverCclkTask, MinToSec(HourToMin(AT24CXX_Manager_NET.DaysNumberOfCCLK * 24)), NULL); // 604,800
    RTC_TASK.InitSetTimeTask(PauseTimeOfLinkErr, 1, NULL); // 刚开启，延时 1s 后允许连接网络
    if (AT24CXX_Manager_NET.IsColorDislay) {
#ifdef _COLORSHOW_H
        initTaskOfColorShowTask();
#endif
    }
    return;
}
// 设置或查询 AT指令 的装载方法
void _DataInstallation(strnew OutStr, struct _NetDevATCmdData This) {
    if (UP_Mode_EC20_ON) {
#ifdef _4G_ATCMD_FUNCTIONSUM_H
        DataInstallation_4G(OutStr, &This);
#endif
    } else {
#ifdef _NET_ATCMD_FUNCTIONSUM_H
        DataInstallation_NET(OutStr, &This);
#endif
    }
}
// 处理指令返回的方法
bool _DoingATCmdResData(struct _NetDevATCmdData This) {
    bool ResFlag = false;
    if (UP_Mode_EC20_ON) {
#ifdef _4G_ATCMD_FUNCTIONSUM_H
        ResFlag = DoingATCmdResData_4G(&This);
#endif
    } else {
#ifdef _NET_ATCMD_FUNCTIONSUM_H
        ResFlag = DoingATCmdResData_NET(&This);
#endif
    }
    return ResFlag;
}
// 建立对象的函数
NetDevATCmd New_NetDevAT_Obj(NetDevATCmd DataInit) {
    DataInit.DataInstallation = _DataInstallation;
    DataInit.DoingATCmdResData = _DoingATCmdResData;
    return DataInit;
}

void MQTT_NetAT_Init(void) {
    // 初始化 NetDevice_ATData
    if (UP_Mode_EC20_ON) {
#ifdef _4G_ATCMD_FUNCTIONSUM_H
        NetDevice_ATData = NetDevice_ATData_4G;
#endif
    } else {
#ifdef _NET_ATCMD_FUNCTIONSUM_H
        NetDevice_ATData = NetDevice_ATData_NET;
#endif
    }
    for (int i = 0; i < ATCMD_MAXNUMBER; i++) {
        NetDevice_ATData[i] = New_NetDevAT_Obj(NetDevice_ATData[i]);
    }
    return;
}
