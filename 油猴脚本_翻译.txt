// ==UserScript==
// @name              拒绝打开傻逼百度题库+单词翻译
// @namespace         http://tampermonkey.net/
// @version           0.1
// @author            chai21sks
// @description       在浏览器右上角显示一个文本框，双击英文单词时调用有道翻译API并显示翻译结果【学习自用】
// @match             *://*/*
// @match             *://*.easylearn.baidu.com/*
// @grant             GM_xmlhttpRequest
// @grant             GM_addStyle
// ==/UserScript==
if (window.self != window.top) {
    return; //直接返回
}
let Fanyi_Flag = true;
let selectedText = null;
(function() {
    'use strict';
    // 判断当前网址是否匹配模式
    const currentUrl = window.location.href;
    const pattern1 = /^https?:\/\/([^.]+\.)?easylearn\.baidu\.com\/.*$/;
    const pattern2 = /^https?:\/\/([^.]+\.)?www.baidu.com\/.*$/;
    if (pattern1.test(currentUrl)) {
        // 关闭页面
        window.close();
    } else if (pattern2.test(currentUrl) == false) {
        // 设置文本框
        const textBox = document.createElement('textarea');
        textBox.id = 'myTextBox'; // 添加唯一的ID以便样式应用
        textBox.classList.add('my-extension-style');
        textBox.style.position = 'fixed';
        textBox.style.top = '10px';
        textBox.style.left = '95px';
        textBox.style.width = '200px';
        textBox.style.height = '80px';
        textBox.style.zIndex = '9999';
        textBox.style.color = 'black';
        textBox.style.border = '1px solid #ccc';
        let isDragging = false; // 标记是否正在拖动
        let dragStartX = 0; // 鼠标按下时的初始横坐标
        let dragStartY = 0; // 鼠标按下时的初始纵坐标

        //设置一个按钮
        const button = document.createElement('button');
        button.id = 'myButton'; // 添加唯一的ID以便样式应用
        button.classList.add('my-extension-style');
        button.style.position = 'fixed';
        button.style.top = '10px';
        button.style.left = '40px';
        button.style.width = '50px';
        button.style.height = '80px';
        button.style.zIndex = '9999';
        button.style.color = 'black';
        button.style.border = '1px solid #ccc';
        button.style.background = 'gray';
        button.innerHTML = '翻译';
        // 创建文本框和按钮
        document.body.appendChild(textBox);
        document.body.appendChild(button);
        // 监听按钮的点击事件
        button.addEventListener('click', function() {
            Fanyi_Flag = !Fanyi_Flag;
            if (Fanyi_Flag == true){
                button.innerHTML = '翻译';
            } else {
                button.innerHTML = '翻译';
            }
            const selection = window.getSelection();
            selectedText = selection.toString().trim();
            translateText(selectedText);
        });

        // 监听鼠标按下事件
        textBox.addEventListener('mousedown', function(event) {
            isDragging = true;
            dragStartX = event.clientX;
            dragStartY = event.clientY;
            event.preventDefault(); // 阻止默认行为，避免选中文本等
        });

        // 监听鼠标移动事件
        document.addEventListener('mousemove', function(event) {
            if (isDragging) {
                const deltaX = event.clientX - dragStartX;
                const deltaY = event.clientY - dragStartY;
                textBox.style.top = `${textBox.offsetTop + deltaY}px`;
                textBox.style.left = `${textBox.offsetLeft + deltaX}px`;
                dragStartX = event.clientX;
                dragStartY = event.clientY;
                button.style.top = textBox.style.top;
                button.style.left = `${textBox.offsetLeft + deltaX - 55}px`;
            }
        });

        // 监听鼠标释放事件
        document.addEventListener('mouseup', function(event) {
            isDragging = false;
        });
        // 监听双击事件
        document.addEventListener('dblclick', function (event) {
            const selection = window.getSelection();
            selectedText = selection.toString().trim();
            translateText(selectedText);
        });

        // 监听键盘按下事件 shift+enter
        document.addEventListener('keydown', function (event) {
            // 检查是否同时按下了 Shift 键和 Enter 键
            if (event.shiftKey && event.key === 'Enter') {
                const selection = window.getSelection();
                selectedText = selection.toString().trim();
                translateText(selectedText);
            }
        });

        // 调用有道翻译API并显示翻译结果
        function translateText(text) {
            GM_xmlhttpRequest({
                method: "GET",
                url: `https://dict.youdao.com/w/eng/${encodeURIComponent(text)}`,
                onload: function(response) {
                    if (response.status === 200) {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(response.responseText, "text/html");
                        const translationElement = doc.querySelector('.trans-container ul');
                        const translationText = translationElement ? translationElement.textContent : "未找到翻译";

                        showTranslationResult(text, translationText);
                    } else {
                        showTranslationResult(text, "翻译请求失败");
                    }
                }
            });
        }

        // 显示翻译结果
        function showTranslationResult(originalText, translationText) {
            textBox.value="";

            // 第一步：在结尾是 "." 的单词前加上 "%"
            var step1Text = translationText.replace(/(\S+)\.\s+/g, '%$1.@');

            // 第二步：替换所有的 "\n" 为 ""
            var step2Text = step1Text.replace(/\n/g, '');

            // 第三步：将连续超过两个空格的空格替换为 ""
            var step3Text = step2Text.replace(/\s{2,}/g, ' ');

            // 第四步：将所有的 "@" 替换为回车
            var step4Text = step3Text.replace(/@/g, '\n--');

            // 第五步：将所有的 "%" 替换为回车
            var step5Text = step4Text.replace(/%/g, '\n');

            // 第六步：将所有的 ";" 替换为回车
            var step6Text = step5Text.replace(/;/g, '\n--');

            // 第六步：将所有的 ";" 替换为回车
            translationText = step6Text.replace(/-- /g, '\--');

            // 输出替换后的文本
            textBox.value = originalText + translationText;
        }

        // 定义拖动事件处理函数
        function handleDragStart(event) {
            dragStartX = event.clientX;
            dragStartY = event.clientY;
            event.dataTransfer.setData('text/plain', event.target.value);
            event.target.style.opacity = '0.5';
        }

        function handleDrag(event) {
            const deltaX = event.clientX - dragStartX;
            const deltaY = event.clientY - dragStartY;
            textBox.style.top = `${textBox.offsetTop + deltaY}px`;
            textBox.style.left = `${textBox.offsetLeft + deltaX}px`;
            dragStartX = event.clientX;
            dragStartY = event.clientY;
        }

        function handleDragEnd(event) {
            event.target.style.opacity = '1';
        }

        // 绑定拖动事件处理函数
        textBox.addEventListener('dragstart', handleDragStart);
        textBox.addEventListener('drag', handleDrag);
        textBox.addEventListener('dragend', handleDragEnd);
    }
})();
